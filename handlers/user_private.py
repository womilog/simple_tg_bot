from aiogram import F, types, Router
from aiogram.filters import CommandStart, StateFilter, or_f, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile

from common.scripts_for_track import get_trips
from kbds.reply import get_reply_keyboard
from common.scripts_for_weather import get_weather
from common.database import SchedulerDatabase, AudioDatabase

user_private_router = Router()

MAIN_KBDS = get_reply_keyboard(
    '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚òÄÔ∏è',
    '–£–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —ç–ª–µ–∫—Ç—Ä–∏—á–∫—É üöù',
    '–ê—É–¥–∏–æ üéµ',
    '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ üìã',
    placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    sizes=(2,),
)


TRACKS_KBDS = get_reply_keyboard(
    '–ó–∞–≤–µ—Ç—ã –ò–ª—å–∏—á–∞ > –Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π –í–æ–∫–∑–∞–ª',
    '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π –í–æ–∫–∑–∞–ª > –ó–∞–≤–µ—Ç—ã –ò–ª—å–∏—á–∞',
    '–ó–∞–≤–µ—Ç—ã –ò–ª—å–∏—á–∞ > –ü—É—à–∫–∏–Ω–æ',
    '–ü—É—à–∫–∏–Ω–æ > –ó–∞–≤–µ—Ç—ã –ò–ª—å–∏—á–∞',
    '–ó–∞–≤–µ—Ç—ã –ò–ª—å–∏—á–∞ > –†–æ—Å—Ç–æ–∫–∏–Ω–æ',
    '–†–æ—Å—Ç–æ–∫–∏–Ω–æ > –ó–∞–≤–µ—Ç—ã –ò–ª—å–∏—á–∞',
    placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    sizes=(2,),
)

PLANS_KBDS = get_reply_keyboard(
    '–ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–∞',
    '–ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ',
    placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    sizes = (2,),
)

AUDIOS_KBDS = get_reply_keyboard(
    '–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ',
    '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è',
    '–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞',
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,),
)


class GiveWeather(StatesGroup):
    weather = State()


class GiveTracks(StatesGroup):
    track = State()


class GiveAudio(StatesGroup):
    choice = State()
    audio = State()
    author = State()


class GivePlans(StatesGroup):
    choice = State()
    write = State()


# –í—ã—Å—ã–ª–∞–π –∫–ª–∞–≤—É –ø—Ä–∏ –≤–≤–æ–¥–µ '/start'
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer('[+] –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? üí™', reply_markup=MAIN_KBDS)


@user_private_router.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@user_private_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("[+] –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã üôÖ", reply_markup=MAIN_KBDS)


@user_private_router.message(StateFilter(None), F.text == '–ê—É–¥–∏–æ üéµ')
async def get_audio_choice(message: types.Message, state: FSMContext):
    await message.answer('[+] –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=AUDIOS_KBDS)
    await state.set_state(GiveAudio.choice)


@user_private_router.message(GiveAudio.choice)
async def set_audio_choice(message: types.Message, state: FSMContext):
    if message.text == '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è':
        cl = AudioDatabase()
        res = cl.all_audios_name()
        await message.answer(res, reply_markup=MAIN_KBDS)
        await state.clear()
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ':
        await message.answer("[+] –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(GiveAudio.audio)
    else:
        await message.answer(f"[+] –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞", reply_markup=MAIN_KBDS)
        await state.set_state(GiveAudio.author)


@user_private_router.message(GiveAudio.audio, F.text)
async def return_audio(message: types.Message, state: FSMContext):
    cl = AudioDatabase()
    try:
        binary_audio = cl.read_audio(message.text)
        await message.answer_audio(BufferedInputFile(binary_audio, message.text), reply_markup=MAIN_KBDS)
        await state.clear()
    except Exception as ex:
        await message.answer(f'[-] –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–∞–∫–∞—è –±–µ–ª–µ–±—É—Ä–¥–∞ {ex}.\n[-] –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.‚òπÔ∏è\n[-] –í–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞"üôÖ')


@user_private_router.message(GiveAudio.author, F.text)
async def return_author_lst(message: types.Message, state: FSMContext):
    cl = AudioDatabase()
    try:
        author_list = cl.author_audios_name(message.text)
        print(author_list)
        await message.answer(author_list, reply_markup=MAIN_KBDS)
        await state.clear()
    except Exception as ex:
        await message.answer(f'[-] –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–∞–∫–∞—è –±–µ–ª–µ–±—É—Ä–¥–∞ {ex}.\n[-] –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.‚òπÔ∏è\n[-] –í–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞"üôÖ')


@user_private_router.message(StateFilter(None), F.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚òÄÔ∏è')
async def get_city(message: types.Message, state: FSMContext):
    await message.answer("[+] –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üèô", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(GiveWeather.weather)


@user_private_router.message(GiveWeather.weather, F.text)
async def return_weather(message: types.Message, state: FSMContext):
    try:
        await message.answer(get_weather(message.text), reply_markup=MAIN_KBDS)
        await state.clear()
    except Exception as ex:
        await message.answer(f'[-] –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–∞–∫–∞—è –±–µ–ª–µ–±—É—Ä–¥–∞ {ex}.\n[-] –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –≥–æ—Ä–æ–¥.‚òπÔ∏è\n[-] –í–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞"üôÖ')


@user_private_router.message(StateFilter(None), F.text == '–£–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —ç–ª–µ–∫—Ç—Ä–∏—á–∫—É üöù')
async def get_train(message: types.Message, state: FSMContext):
    await message.answer("[+] –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üîõ", reply_markup=TRACKS_KBDS)
    await state.set_state(GiveTracks.track)


@user_private_router.message(GiveTracks.track, F.text)
async def return_train(message: types.Message, state: FSMContext):
    await message.answer(get_trips(message.text), reply_markup=MAIN_KBDS)
    await state.clear()


@user_private_router.message(StateFilter(None), F.text == "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ üìã")
async def get_type_schdl(messsage: types.Message, state: FSMContext):
    await messsage.answer("[+] –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=PLANS_KBDS)
    await state.set_state(GivePlans.choice)


@user_private_router.message(GivePlans.choice, F.text)
async def return_answr_kbrd(message: types.Message, state: FSMContext):
    if message.text == '–ó–∞–ø–∏—Å—å –ø–ª–∞–Ω–∞':
        await message.answer("[+] –ü—Ä–æ–ø–∏—Å—ã–≤–∞–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ ', '")
        await state.set_state(GivePlans.write)
    else:
        scheduler_db = SchedulerDatabase()
        text = scheduler_db.read_last_schedule()
        text = ''.join(['-' + x + '\n' for x in text.split(', ')])
        await message.answer(text, reply_markup=MAIN_KBDS)
        await state.clear()


@user_private_router.message(GivePlans.write, F.text)
async def write_plan(message: types.Message, state: FSMContext):
    scheduler_db = SchedulerDatabase()
    data = str(message.text)
    flag = scheduler_db.write_schedule(data)
    if flag:
        await message.answer("[+] –ü–ª–∞–Ω—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–¥!", reply_markup=MAIN_KBDS)
    else:
        await message.answer("[+] –ü–ª–∞–Ω—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–¥(", reply_markup=MAIN_KBDS)
    await state.clear()



