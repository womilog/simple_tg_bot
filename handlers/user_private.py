from aiogram import F, types, Router
from aiogram.filters import CommandStart, StateFilter, or_f, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from common.scripts_for_track import get_trips
from kbds.reply import get_keyboard
from common.scripts_for_weather import get_weather

user_private_router = Router()

MAIN_KBDS = get_keyboard(
    '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚òÄÔ∏è',
    '–£–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —ç–ª–µ–∫—Ç—Ä–∏—á–∫—É üöù',
    placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    sizes=(2,),
)


TRACKS_KBDS = get_keyboard(
    '–ó–∞–≤–µ—Ç—ã-–ò–ª—å–∏—á–∞--–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π –í–æ–∫–∑–∞–ª',
    '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π –í–æ–∫–∑–∞–ª--–ó–∞–≤–µ—Ç—ã-–ò–ª—å–∏—á–∞',
    '–ó–∞–≤–µ—Ç—ã-–ò–ª—å–∏—á–∞--–ü—É—à–∫–∏–Ω–æ',
    '–ü—É—à–∫–∏–Ω–æ--–ó–∞–≤–µ—Ç—ã-–ò–ª—å–∏—á–∞',
    placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    sizes=(2,),
)


class GiveWeather(StatesGroup):
    weather = State()


class GiveTracks(StatesGroup):
    track = State()



# –í—ã—Å—ã–ª–∞–π –∫–ª–∞–≤—É –ø—Ä–∏ –≤–≤–æ–¥–µ '/start'
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer('[+] –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? üí™', reply_markup=MAIN_KBDS)


@user_private_router.message(StateFilter(None), F.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚òÄÔ∏è')
async def get_city(message: types.Message, state: FSMContext):
    await message.answer("[+] –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üèô", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(GiveWeather.weather)


@user_private_router.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@user_private_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("[+] –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã üôÖ", reply_markup=MAIN_KBDS)


@user_private_router.message(GiveWeather.weather, F.text)
async def return_weather(message: types.Message, state: FSMContext):
    try:
        await message.answer(get_weather(message.text), reply_markup=MAIN_KBDS)
        await state.clear()
    except Exception as ex:
        await message.answer(f'[-] –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–∞–∫–∞—è –±–µ–ª–µ–±—É—Ä–¥–∞ {ex}.\n[-] –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –≥–æ—Ä–æ–¥.‚òπÔ∏è\n[-] –í–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞"üôÖ')


@user_private_router.message(StateFilter(None), F.text == '–£–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —ç–ª–µ–∫—Ç—Ä–∏—á–∫—É üöù')
async def get_city(message: types.Message, state: FSMContext):
    await message.answer("[+] –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üîõ", reply_markup=TRACKS_KBDS)
    await state.set_state(GiveTracks.track)


@user_private_router.message(GiveTracks.track, F.text)
async def return_weather(message: types.Message, state: FSMContext):
    await message.answer(get_trips(message.text), reply_markup=MAIN_KBDS)
    await state.clear()




